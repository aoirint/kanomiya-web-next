name: Deploy with Docker

on:
  push:
    branches:
      - main
  release:
    types:
      - created
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/aoirint/kanomiya-web-next
  IMAGE_TAG: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}

permissions:
  contents: read
  pages: write
  packages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # GitHub Secretが設定されている場合、本番用リソースを展開
      - uses: actions/create-github-app-token@v1
        id: content-repository-app-token
        env:
          content_repository_app_id: ${{ vars.CONTENT_REPOSITORY_APP_ID }}
        if: ${{ env.content_repository_app_id != ''}}
        with:
          app-id: ${{ env.content_repository_app_id }}
          private-key: ${{ secrets.CONTENT_REPOSITORY_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout production resources
        uses: actions/checkout@v4
        env:
          content_repository_app_id: ${{ vars.CONTENT_REPOSITORY_APP_ID }}
        if: ${{ env.content_repository_app_id != ''}}
        with:
          repository: ${{ secrets.CONTENT_REPOSITORY_URL }}
          path: ./resources
          token: ${{ steps.content-repository-app-token.outputs.token }}

      - name: Extract production resources
        env:
          content_repository_app_id: ${{ vars.CONTENT_REPOSITORY_APP_ID }}
        if: ${{ env.content_repository_app_id != ''}}
        run: rsync -av ./resources/ ./public/

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Deploy Docker image
        uses: docker/build-push-action@v5
        env:
          IMAGE_NAME_AND_TAG: ${{ format('{0}:{1}', env.IMAGE_NAME, env.IMAGE_TAG) }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_AND_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache,mode=max

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ./.next
          key: ${{ runner.os }}-next-build-cache-v3-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-next-build-cache-v3-

      - name: Build
        env:
          IMAGE_NAME_AND_TAG: ${{ format('{0}:{1}', env.IMAGE_NAME, env.IMAGE_TAG) }}
        run: |
          mkdir -p ./.next
          sudo chown -R "1000:1000" ./.next

          docker run --init --name "builder" \
            -v "$PWD/.next:/work/.next" \
            "${{ env.IMAGE_NAME_AND_TAG }}"

          docker cp "builder:/work/out" "$PWD/out"
          docker rm -f "builder"

          sudo chown -R "$(id -u):$(id -g)" ./out ./.next

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
